package com.epam.esm.dao.impl;

import com.epam.esm.dao.config.TestDaoConfig;
import com.epam.esm.dao.constant.Queries;
import com.epam.esm.dao.constant.TableNames;
import com.epam.esm.dao.entity.Certificate;
import com.epam.esm.dao.entity.Tag;
import com.epam.esm.dao.mappers.TagRowMapper;
import com.epam.esm.dao.parametersources.CertificateParameterSource;
import com.epam.esm.dao.parametersources.TagParameterSource;
import com.epam.esm.dao.util.CertificateGenerator;
import com.epam.esm.dao.util.TagGenerator;
import com.sun.net.ssl.TrustManagerFactorySpi;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(SpringExtension.class)
@ContextConfiguration(classes = TestDaoConfig.class)
@ActiveProfiles("test")
@Sql(value = "/sql/create_database.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD)
@Sql(value = "/sql/create_database.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
class TagDaoImplTest {

    @Autowired
    TagDaoImpl tagDao;

    @Autowired
    JdbcTemplate template;

    @Test
    void create() {
        Tag expected = TagGenerator.generate();
        Tag actual;

        int id = tagDao.create(expected).getId();
        tagDao.create(expected);
        expected = expected.toBuilder().id(id).build();
        actual = getTagById(id);

        assertEquals(expected, actual);
    }

    @Test
    void read() {
        Tag expected = TagGenerator.generate();
        Tag actual;

        Number id = insertAndReturnAutogeneratedId(expected, template);

        expected = expected.toBuilder().id(id.intValue()).build();
        actual = tagDao.read(id.intValue()).get();

        assertEquals(expected, actual);
    }

    @Test
    void readByName() {
        List<Tag> tagList = new LinkedList<>();
        Tag.TagBuilder builder = TagGenerator.generate().toBuilder();
        tagList.add(builder.name("tag1").build());
        tagList.add(builder.name("tag2").build());

        List<Tag> expected;
        List<Tag> actual;

        expected = tagList.stream().map(tag -> {
            int id = insertAndReturnAutogeneratedId(tag, template).intValue();
            return tag.toBuilder().id(id).build();
        }).collect(Collectors.toList());

        actual = tagDao.read("%ta%").get();

        assertIterableEquals(expected, actual);
    }

    @Test
    void readByCertificateId() {
        Certificate certificate = CertificateGenerator.generate();
        List<Tag> certificateTagList = new LinkedList<>();
        List<Tag> freeTagList = new LinkedList<>();
        Tag.TagBuilder builder = TagGenerator.generate().toBuilder();
        certificateTagList.add(builder.name("tag1").build());
        certificateTagList.add(builder.name("tag2").build());
        freeTagList.add(builder.name("tag3").build());

        List<Tag> expected;
        List<Tag> actual;

        int certificateId = insertAndReturnAutogeneratedId(certificate, template).intValue();
        expected = certificateTagList.stream().map(tag -> {
            int id = insertAndReturnAutogeneratedId(tag, template).intValue();
            return tag.toBuilder().id(id).build();
        }).collect(Collectors.toList());
        List<Integer> freeTagsId = freeTagList.stream().map(tag -> insertAndReturnAutogeneratedId(tag, template).intValue()).collect(Collectors.toList());
        expected.stream().forEach(tag -> insertCertificateTagDependency(certificateId, tag.getId()));

        actual = tagDao.readByCertificateId(certificateId).get();

        assertNotNull(actual);
        assertIterableEquals(expected, actual);
    }

    @Test
    void delete() {
        Tag tag = TagGenerator.generate();

        int id = insertAndReturnAutogeneratedId(tag, template).intValue();
        tagDao.delete(id);

        assertNull(getTagById(id));
    }

    private Tag getTagById(int id) {
        Tag tag = null;
        List<Tag> searchedCertificates = template.query(Queries.Tag.SELECT_BY_ID, new TagRowMapper(), id);

        if(!searchedCertificates.isEmpty()){
            tag = searchedCertificates.get(0);
        }
        return tag;
    }

    private void insertCertificateTagDependency(int certificateId, int tagId){
        template.update(Queries.CertificateTag.INSERT, certificateId, tagId);
    }
    private Number insertAndReturnAutogeneratedId(Certificate certificate, JdbcTemplate template) {
        SimpleJdbcInsert certificateInsert = new SimpleJdbcInsert(template);
        certificateInsert.withTableName(TableNames.Certificate.TABLE_NAME)
                .usingGeneratedKeyColumns(TableNames.Certificate.ID)
                .usingColumns(TableNames.Certificate.NAME,
                        TableNames.Certificate.DESCRIPTION,
                        TableNames.Certificate.PRICE,
                        TableNames.Certificate.CREATE_DATE,
                        TableNames.Certificate.LAST_UPDATE_DATE,
                        TableNames.Certificate.DURATION);
        return certificateInsert.executeAndReturnKey(new CertificateParameterSource(certificate));
    }
    private Number insertAndReturnAutogeneratedId(Tag tag, JdbcTemplate template) {
        SimpleJdbcInsert certificateInsert = new SimpleJdbcInsert(template);
        certificateInsert.withTableName(TableNames.Tag.TABLE_NAME)
                .usingGeneratedKeyColumns(TableNames.Tag.ID)
                .usingColumns(TableNames.Tag.NAME);
        Number id = certificateInsert.executeAndReturnKey(new TagParameterSource(tag));
        return id;
    }
}